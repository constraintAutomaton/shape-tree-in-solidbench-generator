{"version":3,"file":"walker.js","sourceRoot":"","sources":["walker.ts"],"names":[],"mappings":"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","sourcesContent":["import { join, basename, dirname } from \"path\";\nimport { readdirSync, copyFileSync, statSync } from \"fs\";\nimport { ShapeContentPath, Config, ShapeDontExistError } from './util';\n\n/**\n * Walk every pod of a directory\n * @param {Config} config - The parameters for the generation of the shape and shape tree\n * @returns {Promise<Array<Array<Error>> | undefined>} The errors while the generation or undefined if there was no error\n */\nexport async function walkSolidPods(config: Config): Promise<Array<Array<Error>> | undefined> {\n    const pods_files = readdirSync(config.pods_folder);\n    const errors: Array<Array<Error>> = [];\n    const explore_pods_promises = [];\n\n    for (const pod_path of pods_files) {\n        explore_pods_promises.push(\n            new Promise((resolve, reject) => {\n                const resp = addShapeDataInPod(\n                    {\n                        pod_path: join(config.pods_folder, pod_path),\n                        generate_shape: config.generate_shape,\n                        generate_shape_trees: config.generate_shape_trees,\n                        shape_folder: config.shape_folders\n                    }\n                );\n\n                if (resp === undefined) {\n                    resolve(undefined)\n                }\n\n                reject(resp)\n            })\n        );\n    }\n    const results = await Promise.allSettled(explore_pods_promises);\n    results.forEach((result) => {\n        if (result.status === \"rejected\") {\n            errors.push(result.reason);\n        }\n    });\n    if (errors.length === 0) {\n        return undefined\n    }\n    return errors;\n}\n\n/**\n * Add the shape and shape tree inside the pods \n * @returns {undefined | Array<Error>} The errors or undefined if the was no error\n */\nexport function addShapeDataInPod(\n    {\n        pod_path,\n        generate_shape,\n        generate_shape_trees,\n        shape_folder,\n    }\n        : {\n            pod_path: string,\n            generate_shape?: (path: string, shape_folder: string | undefined) => string | ShapeDontExistError,\n            generate_shape_trees?: (shapes: Array<ShapeContentPath>, pod_path: string) => void,\n            shape_folder?: string\n        })\n\n    : undefined | Array<Error> {\n    if (generate_shape === undefined && generate_shape_trees === undefined) {\n        return undefined;\n    }\n    const pod_contents = readdirSync(pod_path);\n    const error_array: ShapeDontExistError[] = [];\n    const file_generation_promises = [];\n    // shape path and content path\n    const shapes_generated: Array<ShapeContentPath> = [];\n\n\n    for (const pod_content_path of pod_contents) {\n        if (generate_shape !== undefined) {\n            const content_path = join(pod_path, pod_content_path);\n            const shape_path = generate_shape(content_path, shape_folder);\n            if (shape_path instanceof ShapeDontExistError) {\n                error_array.push(shape_path);\n            } else {\n\n                file_generation_promises.push(new Promise(() => {\n                    let resulting_shape_path: string;\n                    if (statSync(content_path).isDirectory()) {\n                        resulting_shape_path = join(content_path, basename(shape_path));\n                    } else {\n                        resulting_shape_path = join(dirname(content_path), basename(shape_path));\n                    }\n                    copyFileSync(shape_path, resulting_shape_path);\n\n                    shapes_generated.push({ shape: resulting_shape_path, content: content_path });\n                }));\n            }\n        }\n    }\n\n    Promise.all(file_generation_promises);\n    if (generate_shape_trees !== undefined) {\n        generate_shape_trees(shapes_generated, pod_path);\n    }\n\n    if (error_array.length !== 0) {\n        return error_array\n    }\n\n}\n\n\n"]}