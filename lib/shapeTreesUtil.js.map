{"version":3,"file":"shapeTreesUtil.js","sourceRoot":"","sources":["shapeTreesUtil.ts"],"names":[],"mappings":";;;AAAA,+BAAoC;AACpC,2BAA4B;AAC5B,+BAAmC;AACnC,2BAA+C;AAC/C,uDAA+C;AAE/C,iCAAgH;AAEhH,MAAM,EAAE,GAAG,IAAI,8BAAW,EAAgB,CAAC;AAE3C;;;;GAIG;AACH,SAAgB,sBAAsB,CAAC,aAAsC,EAAE,QAAgB;IAC3F,MAAM,MAAM,GAAG,IAAI,WAAM,EAAE,CAAC;IAC5B,KAAK,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,aAAa,EAAE;QAC5C,sBAAsB,CAAC,2BAA2B,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;KAC/E;IACD,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;QAC1B,IAAA,mBAAc,EAAC,IAAA,WAAI,EAAC,QAAQ,EAAE,2BAAoB,CAAC,EAAE,MAAM,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;AACP,CAAC;AARD,wDAQC;AAED;;;;;GAKG;AACH,SAAS,sBAAsB,CAAC,UAAkB,EAAE,YAAoB,EAAE,MAAc;IACpF,MAAM,UAAU,GAAG,GAAG,IAAA,YAAK,EAAC,YAAY,CAAC,CAAC,IAAI,IAAI,IAAA,SAAM,GAAE,EAAE,CAAA;IAC5D,MAAM,CAAC,OAAO,CACV,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,EACxB,EAAE,CAAC,SAAS,CAAC,mBAAY,CAAC,EAC1B,EAAE,CAAC,SAAS,CAAC,GAAG,4BAAqB,WAAW,CAAC,CACpD,CAAC;IAEF,MAAM,CAAC,OAAO,CACV,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,EACxB,EAAE,CAAC,SAAS,CAAC,GAAG,4BAAqB,aAAa,CAAC,EACnD,EAAE,CAAC,SAAS,CAAC,GAAG,4BAAqB,UAAU,CAAC,CACnD,CAAC;IAEF,MAAM,CAAC,OAAO,CACV,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,EACxB,EAAE,CAAC,SAAS,CAAC,GAAG,4BAAqB,OAAO,CAAC,EAC7C,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,CAC3B,CAAA;IAED,MAAM,CAAC,OAAO,CACV,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,EACxB,EAAE,CAAC,SAAS,CAAC,GAAG,gBAAS,GAAG,IAAA,cAAS,EAAC,YAAY,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,EACvG,EAAE,CAAC,SAAS,CAAC,2BAA2B,CAAC,YAAY,CAAC,CAAC,CAC1D,CAAC;AACN,CAAC;AAED,SAAS,2BAA2B,CAAC,IAAY;IAC7C,MAAM,EAAE,GAAG,8BAA8B,CAAC;IAC1C,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IAC7B,IAAI,KAAK,KAAK,IAAI,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;KACvE;IACD,MAAM,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACpF,OAAO,GAAG,IAAI,MAAM,UAAU,CAAC,OAAO,CAAC,GAAG,EAAC,GAAG,CAAC,IAAI,IAAI,IAAI,QAAQ,EAAE,CAAC;AAC1E,CAAC","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { Writer } from \"n3\";\nimport { join, parse } from \"path\";\nimport { lstatSync, appendFileSync } from \"fs\";\nimport { DataFactory } from 'rdf-data-factory';\nimport type * as RDF from 'rdf-js';\nimport { ShapeContentPath, RDF_TYPE_IRI, SHAPE_TREE_PREFIX_IRI, SOLID_IRI, SHAPE_TREE_FILE_NAME } from './util';\n\nconst DF = new DataFactory<RDF.BaseQuad>();\n\n/**\n * generate the shape tree file in the pod named by the variable\"SHAPE_TREE_FILE_NAME\"\n * @param {Array<ShapeContentPath>} shape_content - path of the shapes and the shape target\n * @param {string} pod_path - path of the pod\n */\nexport function generateShapeTreesFile(shape_content: Array<ShapeContentPath>, pod_path: string) {\n    const writer = new Writer();\n    for (const { shape, content } of shape_content) {\n        generateTreeAShapeTree(pod_url_path_from_file_path(shape), content, writer);\n    }\n    writer.end((_error, result) => {\n        appendFileSync(join(pod_path, SHAPE_TREE_FILE_NAME), result);\n    });\n}\n\n/**\n * Generate the triples for a shape tree entry (an entry being a type of information like the post, profile and others)\n * @param {string} shape_path - The path of the shape\n * @param {string} content_path - The path of the targeted content, can be a file or a directory\n * @param {Writer} writer - A writer accumulating the shape tree entries\n */\nfunction generateTreeAShapeTree(shape_path: string, content_path: string, writer: Writer) {\n    const label_tree = `${parse(content_path).name}_${uuidv4()}`\n    writer.addQuad(\n        DF.namedNode(label_tree),\n        DF.namedNode(RDF_TYPE_IRI),\n        DF.namedNode(`${SHAPE_TREE_PREFIX_IRI}ShapeTree`)\n    );\n\n    writer.addQuad(\n        DF.namedNode(label_tree),\n        DF.namedNode(`${SHAPE_TREE_PREFIX_IRI}expectsType`),\n        DF.namedNode(`${SHAPE_TREE_PREFIX_IRI}Resource`),\n    );\n\n    writer.addQuad(\n        DF.namedNode(label_tree),\n        DF.namedNode(`${SHAPE_TREE_PREFIX_IRI}shape`),\n        DF.namedNode(shape_path),\n    )\n\n    writer.addQuad(\n        DF.namedNode(label_tree),\n        DF.namedNode(`${SOLID_IRI}${lstatSync(content_path).isDirectory() ? \"instanceContainer\" : \"instance\"}`),\n        DF.namedNode(pod_url_path_from_file_path(content_path))\n    );\n}\n\nfunction pod_url_path_from_file_path(path: string) {\n    const re = /(https?)\\/(.*)\\/(pods)\\/(.*)/;\n    const found = path.match(re);\n    if (found === null) {\n        throw new Error(\"should be an UNIX path to the pods of SolidBench\");\n    }\n    const [http, name_space, pods, rest_url] = [found[1], found[2], found[3], found[4]];\n    return `${http}://${name_space.replace(\"_\",\":\")}/${pods}/${rest_url}`;\n}"]}