{"version":3,"file":"shapeUtil.js","sourceRoot":"","sources":["shapeUtil.ts"],"names":[],"mappings":";;;AAAA,+BAAmC;AACnC,iCAA6C;AAE7C,MAAM,oBAAoB,GAAG,UAAU,CAAC;AACxC,MAAM,eAAe,GAAG,OAAO,CAAC;AAEhC;;;GAGG;AACU,QAAA,SAAS,GAAwB,IAAI,GAAG,CAAC;IAClD,CAAC,OAAO,EAAE,SAAS,eAAe,EAAE,CAAC;CACxC,CAAC,CAAC;AAEH;;;;GAIG;AACH,SAAgB,gBAAgB,CAAC,IAAY,EAAE,eAAmC,oBAAoB;IAClG,MAAM,eAAe,GAAG,IAAA,YAAK,EAAC,IAAI,CAAC,CAAC;IACpC,MAAM,UAAU,GAAG,iBAAS,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACvD,IAAI,UAAU,KAAK,SAAS,EAAE;QAC1B,OAAO,IAAI,0BAAmB,CAAC,mCAAmC,eAAe,CAAC,IAAI,eAAe,CAAC,CAAC;KAC1G;IACD,OAAO,IAAA,WAAI,EAAC,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;AAC9F,CAAC;AAPD,4CAOC","sourcesContent":["import { parse, join } from \"path\";\nimport { ShapeDontExistError } from \"./util\";\n\nconst SHAPE_FOLDER_DEFAULT = \"./shapes\";\nconst SHAPE_EXTENSION = \"shexc\";\n\n/**\n * A map of the type of information in the pod with the path of the shape\n * @constant {Map<string, string>}\n */\nexport const SHAPE_MAP: Map<string, string> = new Map([\n    ['posts', `posts.${SHAPE_EXTENSION}`],\n]);\n\n/**\n * Get the shape related to the data of the pod\n * @param {string} path - The path of a pod data\n * @returns {string | ShapeDontExistError} The template path file or an error if the pod data is not supported\n */\nexport function getShapeFromPath(path: string, shape_folder: string | undefined = SHAPE_FOLDER_DEFAULT): string | ShapeDontExistError {\n    const path_serialized = parse(path);\n    const shape_path = SHAPE_MAP.get(path_serialized.name);\n    if (shape_path === undefined) {\n        return new ShapeDontExistError(`The shape derived from the file ${path_serialized.name} don't exist `);\n    }\n    return join(shape_folder === undefined ? SHAPE_FOLDER_DEFAULT : shape_folder, shape_path);\n}\n"]}